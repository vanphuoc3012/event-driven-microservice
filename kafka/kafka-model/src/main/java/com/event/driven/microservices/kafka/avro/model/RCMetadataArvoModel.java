/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.event.driven.microservices.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RCMetadataArvoModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -396325725283155267L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RCMetadataArvoModel\",\"namespace\":\"com.event.driven.microservices.kafka.avro.model\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"stream\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"partition\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"offset\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RCMetadataArvoModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RCMetadataArvoModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RCMetadataArvoModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RCMetadataArvoModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RCMetadataArvoModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RCMetadataArvoModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RCMetadataArvoModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RCMetadataArvoModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RCMetadataArvoModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String uri;
  private java.lang.String requestId;
  private java.lang.String id;
  private java.lang.String dt;
  private java.lang.String domain;
  private java.lang.String stream;
  private java.lang.String topic;
  private java.lang.String partition;
  private java.lang.String offset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RCMetadataArvoModel() {}

  /**
   * All-args constructor.
   * @param uri The new value for uri
   * @param requestId The new value for requestId
   * @param id The new value for id
   * @param dt The new value for dt
   * @param domain The new value for domain
   * @param stream The new value for stream
   * @param topic The new value for topic
   * @param partition The new value for partition
   * @param offset The new value for offset
   */
  public RCMetadataArvoModel(java.lang.String uri, java.lang.String requestId, java.lang.String id, java.lang.String dt, java.lang.String domain, java.lang.String stream, java.lang.String topic, java.lang.String partition, java.lang.String offset) {
    this.uri = uri;
    this.requestId = requestId;
    this.id = id;
    this.dt = dt;
    this.domain = domain;
    this.stream = stream;
    this.topic = topic;
    this.partition = partition;
    this.offset = offset;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return requestId;
    case 2: return id;
    case 3: return dt;
    case 4: return domain;
    case 5: return stream;
    case 6: return topic;
    case 7: return partition;
    case 8: return offset;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = value$ != null ? value$.toString() : null; break;
    case 1: requestId = value$ != null ? value$.toString() : null; break;
    case 2: id = value$ != null ? value$.toString() : null; break;
    case 3: dt = value$ != null ? value$.toString() : null; break;
    case 4: domain = value$ != null ? value$.toString() : null; break;
    case 5: stream = value$ != null ? value$.toString() : null; break;
    case 6: topic = value$ != null ? value$.toString() : null; break;
    case 7: partition = value$ != null ? value$.toString() : null; break;
    case 8: offset = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.String getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.String value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return The value of the 'requestId' field.
   */
  public java.lang.String getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'dt' field.
   * @return The value of the 'dt' field.
   */
  public java.lang.String getDt() {
    return dt;
  }


  /**
   * Sets the value of the 'dt' field.
   * @param value the value to set.
   */
  public void setDt(java.lang.String value) {
    this.dt = value;
  }

  /**
   * Gets the value of the 'domain' field.
   * @return The value of the 'domain' field.
   */
  public java.lang.String getDomain() {
    return domain;
  }


  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(java.lang.String value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'stream' field.
   * @return The value of the 'stream' field.
   */
  public java.lang.String getStream() {
    return stream;
  }


  /**
   * Sets the value of the 'stream' field.
   * @param value the value to set.
   */
  public void setStream(java.lang.String value) {
    this.stream = value;
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.String getTopic() {
    return topic;
  }


  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.String value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return The value of the 'partition' field.
   */
  public java.lang.String getPartition() {
    return partition;
  }


  /**
   * Sets the value of the 'partition' field.
   * @param value the value to set.
   */
  public void setPartition(java.lang.String value) {
    this.partition = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.String getOffset() {
    return offset;
  }


  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.String value) {
    this.offset = value;
  }

  /**
   * Creates a new RCMetadataArvoModel RecordBuilder.
   * @return A new RCMetadataArvoModel RecordBuilder
   */
  public static com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder newBuilder() {
    return new com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder();
  }

  /**
   * Creates a new RCMetadataArvoModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RCMetadataArvoModel RecordBuilder
   */
  public static com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder newBuilder(com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder other) {
    if (other == null) {
      return new com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder();
    } else {
      return new com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder(other);
    }
  }

  /**
   * Creates a new RCMetadataArvoModel RecordBuilder by copying an existing RCMetadataArvoModel instance.
   * @param other The existing instance to copy.
   * @return A new RCMetadataArvoModel RecordBuilder
   */
  public static com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder newBuilder(com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel other) {
    if (other == null) {
      return new com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder();
    } else {
      return new com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for RCMetadataArvoModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RCMetadataArvoModel>
    implements org.apache.avro.data.RecordBuilder<RCMetadataArvoModel> {

    private java.lang.String uri;
    private java.lang.String requestId;
    private java.lang.String id;
    private java.lang.String dt;
    private java.lang.String domain;
    private java.lang.String stream;
    private java.lang.String topic;
    private java.lang.String partition;
    private java.lang.String offset;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.requestId)) {
        this.requestId = data().deepCopy(fields()[1].schema(), other.requestId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dt)) {
        this.dt = data().deepCopy(fields()[3].schema(), other.dt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.domain)) {
        this.domain = data().deepCopy(fields()[4].schema(), other.domain);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.stream)) {
        this.stream = data().deepCopy(fields()[5].schema(), other.stream);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.topic)) {
        this.topic = data().deepCopy(fields()[6].schema(), other.topic);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.partition)) {
        this.partition = data().deepCopy(fields()[7].schema(), other.partition);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.offset)) {
        this.offset = data().deepCopy(fields()[8].schema(), other.offset);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing RCMetadataArvoModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.requestId)) {
        this.requestId = data().deepCopy(fields()[1].schema(), other.requestId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dt)) {
        this.dt = data().deepCopy(fields()[3].schema(), other.dt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.domain)) {
        this.domain = data().deepCopy(fields()[4].schema(), other.domain);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stream)) {
        this.stream = data().deepCopy(fields()[5].schema(), other.stream);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.topic)) {
        this.topic = data().deepCopy(fields()[6].schema(), other.topic);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.partition)) {
        this.partition = data().deepCopy(fields()[7].schema(), other.partition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.offset)) {
        this.offset = data().deepCopy(fields()[8].schema(), other.offset);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.String getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setUri(java.lang.String value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestId' field.
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setRequestId(java.lang.String value) {
      validate(fields()[1], value);
      this.requestId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'requestId' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setId(java.lang.String value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dt' field.
      * @return The value.
      */
    public java.lang.String getDt() {
      return dt;
    }


    /**
      * Sets the value of the 'dt' field.
      * @param value The value of 'dt'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setDt(java.lang.String value) {
      validate(fields()[3], value);
      this.dt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dt' field has been set.
      * @return True if the 'dt' field has been set, false otherwise.
      */
    public boolean hasDt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dt' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearDt() {
      dt = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'domain' field.
      * @return The value.
      */
    public java.lang.String getDomain() {
      return domain;
    }


    /**
      * Sets the value of the 'domain' field.
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setDomain(java.lang.String value) {
      validate(fields()[4], value);
      this.domain = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'domain' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'stream' field.
      * @return The value.
      */
    public java.lang.String getStream() {
      return stream;
    }


    /**
      * Sets the value of the 'stream' field.
      * @param value The value of 'stream'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setStream(java.lang.String value) {
      validate(fields()[5], value);
      this.stream = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'stream' field has been set.
      * @return True if the 'stream' field has been set, false otherwise.
      */
    public boolean hasStream() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'stream' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearStream() {
      stream = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.String getTopic() {
      return topic;
    }


    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setTopic(java.lang.String value) {
      validate(fields()[6], value);
      this.topic = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * @return The value.
      */
    public java.lang.String getPartition() {
      return partition;
    }


    /**
      * Sets the value of the 'partition' field.
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setPartition(java.lang.String value) {
      validate(fields()[7], value);
      this.partition = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'partition' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearPartition() {
      partition = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.String getOffset() {
      return offset;
    }


    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder setOffset(java.lang.String value) {
      validate(fields()[8], value);
      this.offset = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public com.event.driven.microservices.kafka.avro.model.RCMetadataArvoModel.Builder clearOffset() {
      offset = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RCMetadataArvoModel build() {
      try {
        RCMetadataArvoModel record = new RCMetadataArvoModel();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.String) defaultValue(fields()[0]);
        record.requestId = fieldSetFlags()[1] ? this.requestId : (java.lang.String) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.String) defaultValue(fields()[2]);
        record.dt = fieldSetFlags()[3] ? this.dt : (java.lang.String) defaultValue(fields()[3]);
        record.domain = fieldSetFlags()[4] ? this.domain : (java.lang.String) defaultValue(fields()[4]);
        record.stream = fieldSetFlags()[5] ? this.stream : (java.lang.String) defaultValue(fields()[5]);
        record.topic = fieldSetFlags()[6] ? this.topic : (java.lang.String) defaultValue(fields()[6]);
        record.partition = fieldSetFlags()[7] ? this.partition : (java.lang.String) defaultValue(fields()[7]);
        record.offset = fieldSetFlags()[8] ? this.offset : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RCMetadataArvoModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<RCMetadataArvoModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RCMetadataArvoModel>
    READER$ = (org.apache.avro.io.DatumReader<RCMetadataArvoModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uri);

    out.writeString(this.requestId);

    out.writeString(this.id);

    out.writeString(this.dt);

    out.writeString(this.domain);

    out.writeString(this.stream);

    out.writeString(this.topic);

    out.writeString(this.partition);

    out.writeString(this.offset);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uri = in.readString();

      this.requestId = in.readString();

      this.id = in.readString();

      this.dt = in.readString();

      this.domain = in.readString();

      this.stream = in.readString();

      this.topic = in.readString();

      this.partition = in.readString();

      this.offset = in.readString();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uri = in.readString();
          break;

        case 1:
          this.requestId = in.readString();
          break;

        case 2:
          this.id = in.readString();
          break;

        case 3:
          this.dt = in.readString();
          break;

        case 4:
          this.domain = in.readString();
          break;

        case 5:
          this.stream = in.readString();
          break;

        case 6:
          this.topic = in.readString();
          break;

        case 7:
          this.partition = in.readString();
          break;

        case 8:
          this.offset = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










